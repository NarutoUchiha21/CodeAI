/**
 * File: main.js
 * Purpose: Main JavaScript functionality for the Code Reverse-Engineering System
 * Generated by Code Reverse-Engineering System
 */

document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    
    // Add active class to current nav item
    const currentLocation = window.location.pathname;
    const navLinks = document.querySelectorAll('.navbar-nav .nav-link');
    
    navLinks.forEach(link => {
        const linkPath = link.getAttribute('href');
        if (currentLocation === linkPath) {
            link.classList.add('active');
        }
    });
    
    // Handle showing the loading spinner on form submissions
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function() {
            const submitButtons = this.querySelectorAll('button[type="submit"]');
            submitButtons.forEach(button => {
                const originalText = button.innerHTML;
                button.disabled = true;
                button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...`;
                
                // Store the original text for future restoration
                button.setAttribute('data-original-text', originalText);
            });
        });
    });
    
    // Handle code copy buttons
    const codeContainers = document.querySelectorAll('pre code');
    codeContainers.forEach(container => {
        // Create copy button
        const copyButton = document.createElement('button');
        copyButton.className = 'btn btn-sm btn-outline-light code-copy-btn';
        copyButton.innerHTML = '<i class="fas fa-copy"></i>';
        copyButton.title = 'Copy to clipboard';
        
        // Add button to container
        const preElement = container.parentElement;
        preElement.style.position = 'relative';
        preElement.appendChild(copyButton);
        
        // Add click event
        copyButton.addEventListener('click', function() {
            const codeText = container.textContent;
            
            navigator.clipboard.writeText(codeText).then(() => {
                // Change button content temporarily
                const originalHTML = copyButton.innerHTML;
                copyButton.innerHTML = '<i class="fas fa-check"></i>';
                copyButton.classList.add('btn-success');
                copyButton.classList.remove('btn-outline-light');
                
                // Restore original content after a delay
                setTimeout(() => {
                    copyButton.innerHTML = originalHTML;
                    copyButton.classList.remove('btn-success');
                    copyButton.classList.add('btn-outline-light');
                }, 2000);
            }).catch(err => {
                console.error('Could not copy text: ', err);
                copyButton.innerHTML = '<i class="fas fa-times"></i>';
                copyButton.classList.add('btn-danger');
                copyButton.classList.remove('btn-outline-light');
                
                setTimeout(() => {
                    copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                    copyButton.classList.remove('btn-danger');
                    copyButton.classList.add('btn-outline-light');
                }, 2000);
            });
        });
    });
    
    // Collapsible sections (for large data)
    const collapsibleSections = document.querySelectorAll('.collapsible-section');
    collapsibleSections.forEach(section => {
        const header = section.querySelector('.collapsible-header');
        const content = section.querySelector('.collapsible-content');
        const icon = section.querySelector('.collapsible-icon');
        
        if (header && content) {
            header.addEventListener('click', function() {
                content.classList.toggle('show');
                
                if (icon) {
                    if (content.classList.contains('show')) {
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    } else {
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    }
                }
            });
        }
    });
    
    // Handle file tree view toggles
    const fileTreeToggles = document.querySelectorAll('.file-tree-toggle');
    fileTreeToggles.forEach(toggle => {
        toggle.addEventListener('click', function() {
            const childList = this.nextElementSibling;
            if (childList) {
                childList.classList.toggle('d-none');
                
                const icon = this.querySelector('i');
                if (icon) {
                    if (childList.classList.contains('d-none')) {
                        icon.classList.remove('fa-folder-open');
                        icon.classList.add('fa-folder');
                    } else {
                        icon.classList.remove('fa-folder');
                        icon.classList.add('fa-folder-open');
                    }
                }
            }
        });
    });
    
    // Lazy load elements when they appear in the viewport
    const lazyLoadObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const element = entry.target;
                
                // Check if it's a lazy-loaded image
                if (element.classList.contains('lazy-image') && element.dataset.src) {
                    element.src = element.dataset.src;
                    element.classList.remove('lazy-image');
                }
                
                // Check if it's a lazy-loaded visualization
                if (element.classList.contains('lazy-visualization') && element.dataset.visualization) {
                    const visualizationData = JSON.parse(element.dataset.visualization);
                    loadVisualization(element.id, visualizationData);
                    element.classList.remove('lazy-visualization');
                }
                
                // Unobserve after loading
                observer.unobserve(element);
            }
        });
    }, {
        rootMargin: '50px 0px',
        threshold: 0.1
    });
    
    // Observe all lazy-load elements
    document.querySelectorAll('.lazy-image, .lazy-visualization').forEach(element => {
        lazyLoadObserver.observe(element);
    });
});

/**
 * Shows an error message for a specified duration
 * @param {string} message - The error message to display
 * @param {number} duration - Duration in milliseconds to show the message
 */
function showError(message, duration = 5000) {
    // Create error alert
    const errorAlert = document.createElement('div');
    errorAlert.className = 'alert alert-danger alert-dismissible fade show error-alert';
    errorAlert.innerHTML = `
        <strong>Error:</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // Add to the document
    document.body.appendChild(errorAlert);
    
    // Auto-hide after duration
    setTimeout(() => {
        errorAlert.classList.remove('show');
        setTimeout(() => {
            errorAlert.remove();
        }, 500);
    }, duration);
}

/**
 * Shows a success message for a specified duration
 * @param {string} message - The success message to display
 * @param {number} duration - Duration in milliseconds to show the message
 */
function showSuccess(message, duration = 3000) {
    // Create success alert
    const successAlert = document.createElement('div');
    successAlert.className = 'alert alert-success alert-dismissible fade show success-alert';
    successAlert.innerHTML = `
        <strong>Success:</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // Add to the document
    document.body.appendChild(successAlert);
    
    // Auto-hide after duration
    setTimeout(() => {
        successAlert.classList.remove('show');
        setTimeout(() => {
            successAlert.remove();
        }, 500);
    }, duration);
}

/**
 * Toggles a loading state on a button
 * @param {HTMLElement} button - The button element
 * @param {boolean} isLoading - Whether to show loading state or restore original
 */
function toggleButtonLoading(button, isLoading) {
    if (isLoading) {
        const originalText = button.innerHTML;
        button.setAttribute('data-original-text', originalText);
        button.disabled = true;
        button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...`;
    } else {
        const originalText = button.getAttribute('data-original-text');
        button.innerHTML = originalText;
        button.disabled = false;
    }
}
